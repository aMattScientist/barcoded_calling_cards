# Initialize settings
outdir=/pathto/your_output_directory
PROJECT_DIR=$outdir/CALLINGCARDS
SCRIPTS=$outdir/CODE/barcoded_calling_cards-master
PROJECT_OUT=$PROJECT_DIR"/output_and_analysis"
PROJECT_RAW=$PROJECT_DIR"/raw"
SAFELIST=$'barcode_safelist.txt'  #optional, not currently implemented 

STAR_REF=REFERENCES/GRCh38/star/2.7.1a/Gencode.v30.overhang100/chr_primary 

twobit_human=$outdir/REFERENCE/hg38.2bit
twobit_mouse=$outdir/REFERENCE/mm10.2bit

GENOME=hg38  

# Initialize important global variables (leave these blank is fine) 
FILENAME=
BARCODE=
INDEX1=
INDEX2=

# Read local variables from $SAMPLE_LINE in subshell,
# then pass them along to the global versions
while IFS=, read -r filename barcode index1 index2
do
    { FILENAME=$filename; }
    { BARCODE=$barcode; }
    { INDEX1=$index1; }
    { INDEX2=$index2; }
done <<< "$SAMPLE_LINE"

# and a corresponding file of barcodes.
BASE=`basename $FILENAME`
STEM=$BARCODE"_""${BASE%%.*}"

# Load the necessary modules
module purge
module load trim_galore ## Using trim galore to load cutadapt and umi-tools 
module load star/2.7.2a
module load samtools
module load bedtools
module load java

# Prepare output variables
OUT_STEM=$PROJECT_OUT/$STEM"_"$GENOME
OUT_SAM=$OUT_STEM".sam"
OUT_BAM=$OUT_STEM".bam"
OUT_MAP_SORT_PREFIX=$OUT_STEM"_map_sort"
OUT_BAM_MAP=$OUT_MAP_SORT_PREFIX".bam"
OUT_BC=$OUT_STEM".bc.fastq"
OUT_BED=$OUT_MAP_SORT_PREFIX".bed"
OUT_BEDGRAPH=$OUT_MAP_SORT_PREFIX".bedgraph"

#PB_LTR="TTTACGCAGACTATCTTTNNNNGGTTAA"  ## changed CTAG to NNNN to allow any basepair here for mutagenesis screen
PB_LTR="TTTACGCAGACTATCTTT"  
Long_PB_LTR="GCGTCAAT"$PB_LTR

transposase=PB

# Trim and demultiplex by LTR + GGTTAA insertion site (exact matching)
# use PB_LTR, not Long_PB_LTR for older data (just check the first bases after your barcode in Read1 to know)
# Use -e 0 for stringent matching (exact barcodes)

cutadapt \
    -g "^"$BARCODE$Long_PB_LTR \
    -o $OUT_STEM".fastq.gz" \
    --minimum-length 1 \
    --discard-untrimmed \
    -e 0.2 \
    $PROJECT_RAW/$FILENAME

# Trim any trailing Nextera adapters (allowing mismatches)
cutadapt \
    -a "CTGTCTCTTATACACATCTCCGAGCCCACGAGACTNNNNNNNNNNTCTCGTATGCCGTCTTCTGCTTG" \
    -o $OUT_STEM".temp.fastq.gz" \
    --minimum-length 25 \
    $OUT_STEM".fastq.gz"

# This adds SRT barcode to read name with umi-tools, also cuts off this adaptor 
# Use --filter-cell-barcode (after bc-pattern line) to remove reads that are not safelisted if you want (error-detecting bcs)
# Otherwise, it will keep any identified barcode. Barcodes are automatically tagged in the output fastq file
# Using REGEX to specify barcode. Searches pattern for 4 nt cell-barcode (cell_1), and 1 nt umi then the GTTAA from an inserted SRT
# (?P<cell_1>.{0,3})(?P<umi_1>.{4})(?P<discard_2>GTTAA) Extracts SRT barcode as 4-nt cell_1 barcode 

umi_tools extract \
    --stdin $OUT_STEM".temp.fastq.gz" \
    --extract-method=regex \
    --bc-pattern='(?P<cell_1>.{0,3})(?P<umi_1>.{4})(?P<discard_1>GGTTAA)' \
    --whitelist=$SAFELIST \
    --stdout $OUT_STEM".temp2.fastq.gz" 
 
# Align reads using star 
STAR --runThreadN 1 \
    --genomeDir $STAR_REF \
    --readFilesCommand zcat \
    --readFilesIn $OUT_STEM".temp2.fastq.gz" \
    --outSAMtype BAM SortedByCoordinate \
    --outFileNamePrefix $OUT_STEM"."

# Tag reads with barcodes

module load python/3.7.3
module load py_packages/3.7

python $SCRIPTS/TagBam.py \
    --tag XP:Z:$BARCODE \
    $OUT_STEM".Aligned.sortedByCoord.out.bam" \
    $OUT_MAP_SORT_PREFIX"_tagged.bam"

# Tag reads wih i7 indexes
python $SCRIPTS/TagBam.py \
    --tag XJ:Z:$INDEX1 \
    $OUT_MAP_SORT_PREFIX"_tagged.bam" \
    $OUT_MAP_SORT_PREFIX"_tagged2.bam"

# Tag reads with i5 indexes
python $SCRIPTS/TagBam.py \
    --tag XK:Z:$INDEX2 \
    $OUT_MAP_SORT_PREFIX"_tagged2.bam" \
    $OUT_MAP_SORT_PREFIX"_tagged3.bam"

# Tag reads with SRT barcode
python $SCRIPTS/TagBamWithSrtBC.py \
	--tag XQ:Z \
	$OUT_MAP_SORT_PREFIX"_tagged3.bam" \
	$OUT_MAP_SORT_PREFIX"_tagged4.bam"

# Tag reads with transposon insertions
python $SCRIPTS/AnnotateInsertionSites.py \
    --transposase $transposase \
    -f \
    $OUT_MAP_SORT_PREFIX"_tagged4.bam" \
    $twobit_human \
    $OUT_MAP_SORT_PREFIX"_final.bam"

# Index the final BAM file
samtools index $OUT_MAP_SORT_PREFIX"_final.bam"

# Get an unsorted list of unique insertions
python $SCRIPTS/BamToCallingCard.py -b XP XJ XQ -i $OUT_MAP_SORT_PREFIX"_final.bam" -o $OUT_MAP_SORT_PREFIX"_unsorted.ccf" 

# Sort the CCF file 
sort -k1V -k2n -k3n $OUT_MAP_SORT_PREFIX"_unsorted.ccf" > $OUT_MAP_SORT_PREFIX"_final.ccf"

# Clean up
rm $OUT_STEM".fastq.gz"
rm $OUT_STEM".temp.fastq.gz"
rm $OUT_STEM".temp2.fastq.gz" 
rm $OUT_MAP_SORT_PREFIX"_tagged.bam"
rm $OUT_MAP_SORT_PREFIX"_tagged2.bam"
rm $OUT_MAP_SORT_PREFIX"_tagged3.bam"
rm $OUT_MAP_SORT_PREFIX"_tagged4.bam"
rm $OUT_MAP_SORT_PREFIX"_unsorted.ccf"
rm $OUT_STEM".Aligned.sortedByCoord.out.bam"
rm $OUT_STEM".SJ.out.tab"
rm $OUT_STEM".Log.progress.out"
rm $OUT_MAP_SORT_PREFIX"_final.bam"
rm $OUT_MAP_SORT_PREFIX"_final.bam.bai"
rm $OUT_STEM".Log.out"

